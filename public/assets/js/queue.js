var queueUnknownItem = function () { let t = $("#transactionModal").find("#addUnknownItem"), e = $("#unknownItemFormModal"), n = e.find("#unknownItemForm"), i = n.find("#name"), a = n.find("#price"), o = e.find("#addItem"); return { init: function () { new AutoNumeric("#price", { minimumValue: 0, watchExternalChanges: !0 }), t.click((function () { _isDraft && e.modal("show") })), e.on("hidden.bs.modal", (function () { n[0].reset(), n.parsley().reset(), a.val("") })), o.click((function () { if (n.parsley().validate()) { const t = { id: 0, product_id: "", package_id: "", item_code: "N/A", name: i.val(), is_cost_price: 0, price: a.val(), qty: 1, disc_percentage: 0, disc_amount: 0, session_count: "", product: { current_stock: 0, is_stock_unlimited: 1 }, package_details: "", uom: "" }; t.amount_to_pay = t.price, t.unit_price = t.price, queueTransactionItem.addItem(t), e.modal("hide") } })) } } }(), pxLabel = function () { const t = $("#labelTablePrint"), e = t.find("#codeLabel"), n = t.find("#nricLabel"), i = t.find("#nameLabel"), a = t.find("#birthDateLabel"), o = t.find("#ageLabel"), s = t.find("#genderLabel"), r = t.find("#createdDateLabel"), d = t.find("#mobileLabel"), c = t.find("#addressLabel"), l = t.find("#cityZipCodeLabel"), u = t.find("#allergyLabel"), m = t.find("#nationalityLabel"); return { printLabel: function (p = "") { "" == p && (p = `${_url}/${_id}/label`); cms.get(p, null, (function (p) { e.text(p.code), n.text(p.nric), i.text(p.name), a.text(cms.formatDate(p.birthDate)), o.text(`${p.age} y`), s.text(p.gender), r.text(moment(p.createdDate).format("DD MMM YYYY")), d.text(p.mobile), c.text(p.address), l.text(`${p.city} ${p.zipCode}`), u.text(p.allergy), m.text(p.nationality), t.print() })) } } }(), queueItemLabel = function () { let t, e = $("#itemLabelModal"), n = e.find(".modal-body"), i = e.find("#printLabel"), a = $("#invoiceTablePrint"), o = $("#itemLabelTablePrint"), s = o.find("#labelTemplate"); return { view: function () { const i = queueTransactionItem.printItems(); cms.get(`${_url}/${_id}/item-label/edit`, i, (function (i) { n.html(i), t = n.find("#labelForm"), n.find(".usage").select2({ placeholder: "Select Usage", dropdownParent: t, allowClear: !0 }), n.find(".dosage").select2({ placeholder: "Select Dosage", dropdownParent: t, allowClear: !0 }), n.find(".unit").select2({ placeholder: "Select Unit", dropdownParent: t, allowClear: !0 }), n.find(".frequency").select2({ placeholder: "Select Frequency", dropdownParent: t, allowClear: !0 }), e.modal("show") })) }, init: function () { i.click((function () { _isDraft ? (o.find(".item-label-row").remove(), n.find(".card").each((function () { const t = $(this), e = $(`\n                            <tr class="item-label-row page-break-always">\n                                <td>${s.html()}</td>\n                            </tr>\n                        `); e.find(".name").text(t.find(".card-header").text()), e.find(".qty").text(t.find(".qty").val()), e.find(".dosage").text(`${t.find(".usage").find(":selected").text()} ${t.find(".dosage").find(":selected").text()} ${t.find(".unit").find(":selected").text()} ${t.find(".frequency").find(":selected").text()}`), e.find(".description").html(t.find(".description").val()), s.after(e) })), o.find(".branch").text(t.find("#branch").val()), o.find(".branchAddress").text(t.find("#branchAddress").val()), o.find(".patient").text(t.find("#patient").val()), o.find(".date").text(moment().format("DD/MM/YYYY")), a.removeClass("table-print"), o.addClass("table-print"), o.print()) : function () { if (t.parsley().validate()) { const e = { items: n.find(".card").map((function (t, e) { const n = $(this); return { trId: n.data("tr-id"), trProductId: n.data("tr-prod-id"), usage: n.find(".usage").val(), dosage: n.find(".dosage").val(), unit: n.find(".unit").val(), frequency: n.find(".frequency").val() } })).get() }; cms.put(`${_url}/${_id}/item-label/update`, e, (e => { var n; n = e.ids, cms.get(`${_url}/${_id}/item-label`, { ids: n }, (function (e) { o.find(".item-label-row").remove(); for (let t = 0; t < e.items.length; t++) { const n = e.items[t], i = $(`\n                        <tr class="item-label-row page-break-always">\n                            <td>${s.html()}</td>\n                        </tr>\n                    `); i.find(".name").text(n.name), i.find(".qty").text(n.qty), i.find(".dosage").text(n.dosage), i.find(".description").html(n.description), s.after(i) } o.find(".branch").text(t.find("#branch").val()), o.find(".branchAddress").text(t.find("#branchAddress").val()), o.find(".patient").text(t.find("#patient").val()), o.find(".date").text(moment().format("DD/MM/YYYY")), a.removeClass("table-print"), o.addClass("table-print"), o.print() })) })) } }() })) } } }(), queueInvoice = function () { let t = $("#transactionModal"), e = $("#invoiceTablePrint"), n = $("#itemLabelTablePrint"), i = e.find(".branch"), a = e.find("#branchAddress"), o = e.find("#branchTelNo"), s = e.find("#branchCoRegNo"), r = e.find(".patient"), d = e.find("#patientAddress"), c = e.find("#patientCity"), l = e.find("#patientZipCode"), u = e.find("#patientNRIC"), m = e.find("#invoiceNo"), p = e.find("#refNo"), f = e.find("#date"), b = e.find("#doctor"), h = e.find("#itemHeader"), y = e.find("#preAmountPayable"), v = e.find("#overallDiscount"), _ = e.find("#pxCredit"), x = e.find("#totalAmountPayable"), g = e.find("#totalAmountPayableRow"), k = e.find("#balance"), T = e.find("#remarks"), C = e.find("#unofficialInvoice"); return { printInvoice: function () { n.removeClass("table-print"), cms.get(`${_url}/${_id}/invoice`, null, (function (n) { n.isDraft ? C.show() : C.hide(), i.text(n.branch), a.text(n.branchAddress), o.text(n.branchTelNo), s.text(n.branchCoRegNo), r.text(n.patient), d.text(n.patientAddress), c.text(n.patientCity), l.text(n.patientZipCode), u.text(cms.isNull(n.patientNRIC, "") ? ` (${n.patientNRIC})` : ""), m.text(n.invoiceNo), p.text(n.refNo), f.text(moment(n.date).format("DD MMM YYYY")), b.text(n.doctor); let w = []; e.find(".item-row").remove(); const D = t.find("#transactionItemsTable").find("tbody").children(); for (let t = 0; t < D.length; t++) { const e = $(D[t]); w.push(`\n                    <tr class="item-row">\n                    <td>${e.find("td:eq(2)").html().replace("float-end", "ms-2")}</td>\n                    <td>${e.find(".qty").text()}</td>\n                    <td class="text-end">${e.find(".disc").text()}</td>\n                    <td class="text-end">${_currencySymbol}${e.find(".subtotal-display").text()}</td>\n                    </tr>\n                `) } h.after(w.join("")), y.text(t.find("#preSubTotal").text()), v.text(t.find("#overallDiscDisplay").text()), _.text(t.find("#pxCreditDisplay").text()), x.text(t.find("#preSubTotal").text()); const q = t.find("#totalSubTotal").text(); x.text(q); let P = []; e.find(".payment-row").remove(); const S = t.find("#paymentsTable").find("tbody").children(); for (let t = 0; t < S.length; t++) { const e = $(S[t]), n = e.find("td:eq(3)").text(); P.push(`\n                    <tr class="payment-row">\n                    <td class="text-start">${"" != n ? `${n} - ` : ""}${e.find("td:eq(1)").text()}</td>\n                    <th colspan="2">Payment Received</th>\n                    <td class="text-end">${e.find("td:eq(2)").text()}</td>\n                    </tr>\n                `) } g.after(P.join("")); const I = t.find("#paymentTotal").text(); k.text(_currencySymbol + cms.numberWithCommas((cms.convertToDecimal(q.replace(_currencySymbol, "")) - cms.convertToDecimal(I.replace(_currencySymbol, ""))).toFixed(2))), T.length > 0 && T.text(n.remarks), e.addClass("table-print"), e.print() })) } } }(), queueOutsidePrescription = function () { let t = $("#outsidePrescriptionModal"), e = t.find("#outsidePrescriptionModalTitle"), n = t.find("#outsidePrescriptionForm"), i = n.find("#addOutsidePrescriptionContainer"), a = n.find("#addOutsidePrescription"), o = n.find("#formContainer"), s = o.find("#addMedicine"), r = o.find("#medicinesTable").find("tbody"), d = o.find("#cancelOutsidePrescription"), c = o.find("#draftOutsidePrescription"), l = o.find("#saveOutsidePrescription"); return { init: function () { a.click((function () { _outsidePrescriptionId = 0, p() })), s.click((function () { u({ id: 0, description: "", dosage: "", remarks: "" }) })), d.click((function () { m(), o.slideUp((function () { i.fadeIn() })) })), c.click((function () { f(1) })), l.click((function () { f(0) })), t.on("hidden.bs.modal", (function () { d.trigger("click") })) }, view: function (n, i) { queueOutsidePrescriptionList.init(), e.text(`Outside Prescription: ${n} - ${i}`), t.modal("show") }, viewForm: p }; function u(t) { $(`\n        <tr id="tr${t.id}">\n            <td><button type="button" class="btn btn-primary btn-xs fs-9px delete"><i class="fa fa-trash"></i></button></td>\n            <td>\n                <input type="text" class="form-control form-control-sm description" required value="${t.description}"/>\n            </td>\n            <td>\n                <input type="text" class="form-control form-control-sm dosage" required value="${t.dosage}"/>\n            </td>\n            <td>\n                <input type="text" class="form-control form-control-sm remarks" value="${t.remarks}"/>\n            </td>\n        </tr>\n        `).appendTo(r).find(".delete").click((function () { $(this).closest("tr").remove() })) } function m() { r.html(""), n[0].reset(), n.parsley().reset() } function p() { 0 == _outsidePrescriptionId ? (c.show(), i.fadeOut((function () { o.slideDown() }))) : cms.get(`${_url}/${_id}/outside-prescriptions/${_outsidePrescriptionId}/edit`, null, (function (t) { r.empty(); for (let e = 0; e < t.medicines.length; e++) { u(t.medicines[e]) } t.is_draft ? c.show() : c.hide(), i.fadeOut((function () { o.slideDown() })) })) } function f(t) { if (0 == r.children().length) return toastr.error("No medicine found"), !1; if (n.parsley().validate()) { let e = { isDraft: t, medicines: r.children().map((function (t, e) { const n = $(e); return { id: this.id.replace("tr", ""), description: n.find(".description").val(), dosage: n.find(".dosage").val(), remarks: n.find(".remarks").val() } })).get() }; cms.saveForm(_outsidePrescriptionId, e, `${_url}/${_id}/outside-prescriptions`, (function () { queueOutsidePrescriptionList.reload(), m() })) } } }(), queueOutsidePrescriptionList = function () { let t = $("#outsidePrescriptionsTable"), e = null, n = $("#outsidePrescriptionPrint"), i = n.find("#branchName"), a = n.find("#branchAddress"), o = n.find("#patientName"), s = n.find("#patientId"), r = n.find("#patientAddress"), d = n.find("#prescriptionDate"), c = n.find("#prescriptionNo"), l = n.find("#queueId"), u = n.find("#medicinesPrintTable tbody"); return { init: function () { !function () { null != e && e.clear().destroy(); e = t.DataTable({ processing: !0, serverSide: !0, ajax: `${_url}/${_id}/outside-prescriptions`, columns: [{ data: null, name: "actions", searchable: !1, orderable: !1 }, { data: null, name: "indicator", searchable: !1, orderable: !1 }, { data: "id", name: "id" }, { data: "created_at", name: "created_at", visible: !1 }, { data: "created_by", name: "created_by", visible: !1 }], order: [[2, "asc"]], createdRow: function (t, e, n) { let i, a = $(t), o = null != e.deleted_at; o ? (a.addClass("text-decoration-line-through"), i = "muted") : i = e.is_draft ? "yellow" : "green", a.find("td:eq(0)").addClass("text-center").html(!e.is_draft || e.is_draft && e.isCreator ? `<div class="btn-group dropend">\n                        <a href="#" class="dropdown-toggle text-primary" data-bs-toggle="dropdown">\n                        <i class="fa fa-ellipsis-vertical"></i>\n                        </a>\n                        <ul class="dropdown-menu dropdown-menu-end">\n                            ${o ? `<li><button id="revert${e.id}" class="dropdown-item revert fs-11px" type="button">Revert</button></li>` : `${e.isCreator ? `<li><button id="edit${e.id}" class="dropdown-item edit fs-11px" type="button">Edit</button></li>` : ""}\n                            <li><button id="del${e.id}" class="dropdown-item delete fs-11px" type="button">${e.is_draft ? "Delete" : "Scrap"} Outside Prescription</button></li>\n                            `}\n                            ${e.is_draft || o ? "" : `<li>\n                                <hr class="dropdown-divider">\n                            </li>\n                            <li><button id="print${e.id}" class="dropdown-item print fs-11px" type="button">Print</button></li> `}\n                        </ul>\n                    </div>` : ""), a.find("td:eq(1)").addClass("text-center").html(`<i class="fa fa-circle text-${i}"></i>`); const s = e.medicines.split("#newRow#"); let r = []; for (let t = 0; t < s.length; t++) { const e = s[t].split("#brCol#"); r.push(`<tr>\n                    <td>${e[0]}</td>\n                    <td>${e[1]}</td>\n                    <td>${e[2]}</td>\n                    </tr>`) } a.find("td:eq(2)").html(`\n                Created on: ${cms.formatDateTime(e.created_at)} by ${e.created_by}. Prescription # ${e.id}\n                <table class="table table-bordered table-hver table-striped mt-2">\n                <thead>\n                <tr>\n                <th>Medicine</th>\n                <th>Dosage</th>\n                <th>Remarks</th>\n                </tr>\n                </thead>\n                <tbody>${r.join("")}</tbody>\n                </table>\n                `) }, drawCallback: function () { t.find(".edit").unbind("click").click((function () { _outsidePrescriptionId = this.id.replace("edit", ""), queueOutsidePrescription.viewForm() })), t.find(".delete").unbind("click").click((function () { const t = $(this).text(); let e = "delete", n = "deleted"; "Scrap Outside Prescription" == t && (e = "scrap", n = "scrapped"), cms.confirm(t, `Are you sure you want to ${e} this record?`, (() => { cms.delete(`${_url}/${_id}/outside-prescriptions/${this.id.replace("del", "")}`, null, (() => { toastr.success(`Outside prescription has been ${n}.`, t), m() })) })) })), t.find(".revert").unbind("click").click((function () { cms.confirm("Revert Outside Prescription", "Are you sure you want to revert this record?", (() => { cms.put(`${_url}/${_id}/outside-prescriptions/${this.id.replace("revert", "")}/revert`, null, (() => { toastr.success("Outside prescription has been reverted.", "Revert Note"), m() })) })) })), t.find(".print").unbind("click").click((function () { cms.get(`${_url}/${_id}/outside-prescriptions/${this.id.replace("print", "")}/print`, null, (function (t) { i.text(t.branchName), a.text(t.branchAddress), o.text(t.patientName), s.text(t.patientId), r.text(t.patientAddress), d.text(t.prescriptionDate), c.text(t.prescriptionNo), l.text(t.queueId); let e = []; for (let n = 0; n < t.medicines.length; n++) { const i = t.medicines[n]; e.push(`<tr>\n                            <td>${i.description}</td>\n                            <td>${i.dosage}</td>\n                            <td>${i.remarks}</td>\n                            </tr>`) } u.html(e.join("")), n.print() })) })) }, initComplete: function () { $("#outsidePrescriptionsTable_filter input").unbind(), $("#outsidePrescriptionsTable_filter input").keyup((function (t) { 13 == t.keyCode && e.search(this.value).draw() })); $("#outsidePrescriptionsTable_filter").append('<i id="indicatorLegend" class="fa fa-info-circle text-muted fs-12px ms-2" data-bs-toggle="popover" data-bs-trigger="hover" data-bs-html="true"\n                        data-bs-title="Legend Indicator" data-bs-placement="right"\n                        data-bs-content="\n                        <i class=\'fa fa-circle text-green mb-2\'></i> Posted Outside Prescription<br/>\n                        <i class=\'fa fa-circle text-yellow mb-2\'></i> Draft Outside Prescription<br/>\n                        <i class=\'fa fa-circle text-muted\'></i> Scrap Outside Prescription\n                        "></i>'); const t = document.getElementById("indicatorLegend"); new bootstrap.Popover(t) } }) }() }, reload: m }; function m() { e.ajax.reload(null, !1) } }(), queueSessionBalance = function () { let t = $("#sessionBalanceModal"), e = $("#sessionBalanceLogModal"), n = $("#sessionBalanceLogModal").find(".modal-body"), i = $("#transactionModal"), a = $("#sessionBalance"), o = $("#sessionBalancesTable"), s = null; return { init: function () { a.click((function () { null != s && s.clear().destroy(), s = o.DataTable({ processing: !0, serverSide: !0, ajax: `${_url}/session-balances/${i.find("#patientId").val()}`, columns: [{ data: null, name: "select", searchable: !1, orderable: !1 }, { data: "item_code", name: "item_code" }, { data: "name", name: "name" }, { data: "updated_at", name: "updated_at", render: function (t) { return cms.formatDateTime(t) } }, { data: "remaining_session", name: "remaining_session" }, { data: "price", name: "price", render: function (t) { return cms.numberWithCommas(t) } }, { data: "remaining_balance", name: "remaining_balance", render: function (t) { return cms.numberWithCommas(t) } }, { data: null, name: "logs", searchable: !1, orderable: !1 }], order: [[1, "asc"]], createdRow: function (t, e, n) { let i = $(t); i.find("td:eq(0)").addClass("text-center").html(`<button id="sel${e.id}" \n                                                                        data-prod-id="${cms.isNull(e.product_id)}" \n                                                                        data-pck-id="${cms.isNull(e.package_id)}"\n                                                                        data-sc="${e.session_count}" class="btn btn-xs fs-9px btn-primary select" type="button">Select</button>`), i.find("td:eq(2)").html(`<span class="item-name">${e.name}</span>${"" != e.package_details ? `<br/><small>(<span class='package-details'>${e.package_details}: ${e.session_count} session${e.session_count > 1 ? "s" : ""}</span>)</small>` : ""}`), i.find("td:eq(7)").addClass("text-center").html(`<button id="log${e.id}" class="btn btn-xs fs-9px btn-primary log" type="button"><i class="fa fa-file-alt"></i></button>`) }, drawCallback: function () { cms.initTooltip(), o.find(".select").unbind("click").click((function () { const e = $(this), n = this.id.replace("sel", ""); if (queueTransactionItem.isExists(n)) return toastr.error("Item already added"), !1; parseInt(e.data("sc")); const i = e.closest("tr"), a = i.find("td:eq(2)"), o = a.find(".package-details"), s = (parseInt(i.find("td:eq(4)").text()), { id: 0, incomplete_transaction_id: n, product_id: e.data("prod-id"), package_id: e.data("pck-id"), item_code: i.find("td:eq(1)").text(), name: a.find(".item-name").text(), session_count: i.find("td:eq(4)").text(), is_cost_price: 0, unit_price: i.find("td:eq(5)").text(), price: i.find("td:eq(6)").text(), package_details: o.length > 0 ? o.text() : "" }); queueTransactionItem.addItem(s), t.modal("hide") })), o.find(".log").unbind("click").click((function () { cms.get(`${_url}/session-balance-logs/${this.id.replace("log", "")}`, null, (function (t) { n.html(t), e.modal("show") })) })) }, initComplete: function () { $("#sessionBalancesTable_filter input").unbind(), $("#sessionBalancesTable_filter input").keyup((function (t) { 13 == t.keyCode && s.search(this.value).draw() })) } }), t.modal("show") })) } } }(), queueTransactionPayment = function () { let t = $("#transactionModal"), e = t.find("#paymentForm"), n = t.find("#paymentsTable"), i = n.find("tbody"), a = n.find("#paymentTotal"), o = t.find("#addPayment"), s = $("#saveTransaction"), r = 0; return { init: function () { o.click((function () { d({ id: 0, payment_option_id: 0, amount: "", payment_date: cms.currentDate(), remarks: "" }, !1) })) }, clearItems: function () { i.html(""), a.text("") }, isValid: function () { return e.parsley().validate() }, getPaymentTotal: function () { return cms.convertToDecimal(a.text().replace(_currencySymbol, "")) }, itemJSON: function () { return i.children().map((function (t, e) { const n = $(e); return { id: this.id.replace("tr", ""), paymentOption: n.find(".payment-option").val(), amount: cms.convertToDecimal(n.find(".amount").val()), remarks: n.find(".remarks").val() } })).get() }, addPayment: d }; function d(t, e) { s.show(), r++; const n = cms.isNull(t.remarks, ""), a = $(_isDraft ? `\n        <tr id="tr${t.id}">\n            <td>\n            ${e ? '<div class="btn-group dropend">\n                    <a href="#" class="dropdown-toggle text-primary" data-bs-toggle="dropdown">\n                    <i class="fa fa-ellipsis-vertical"></i>\n                    </a>\n                    <ul class="dropdown-menu dropdown-menu-end">\n                        <li><button class="dropdown-item edit fs-11px" type="button">Edit</button></li>\n                        <li><button class="dropdown-item delete fs-11px" type="button">Delete</button></li>\n                    </ul>\n                </div>' : '<button type="button" class="btn btn-primary btn-xs fs-9px delete"><i class="fa fa-trash"></i></button>'}\n            </td>\n            <td>\n                <select class="form-select form-select-sm payment-option" required data-init-val="${t.payment_option_id}">\n                    <option value="" disabled="true" ${0 == t.payment_option_id ? "selected" : ""}>Select payment</option>\n                    ${_paymentOptions.map((function (e) { return `<option value="${e.id}" ${t.payment_option_id == e.id ? "selected" : ""}>${e.description}</option>` })).join("")}\n                </select>\n            </td>\n            <td>\n                <div class="input-group input-group-sm">\n                    <div class="input-group-text input-group-addon bg-primary">${_currencySymbol}</div>\n                    <input id="amount${r}" type="text" class="amount form-control form-control-sm" data-init-val="${t.amount}" value="${t.amount}" required/>\n                </div>\n            </td>\n            <td>\n                <input type="text" class="form-control form-control-sm remarks" data-init-val="${n}" value="${n}" />\n            </td>\n        </tr>\n        ` : `<tr id="tr${t.id}">\n        <td></td>\n        <td>${t.payment_option.description}</td>\n        <td>${_currencySymbol}${cms.numberWithCommas(t.amount)}\n        <input type="hidden" class="amount form-control form-control-sm" value="${t.amount}"/>\n        </td>\n        <td>${null != t.remarks ? t.remarks : ""}</td>\n    </tr>`).appendTo(i); if (_isDraft) { new AutoNumeric(`#amount${r}`, { minimumValue: 0, watchExternalChanges: !0 }), a.find(`#amount${r}`).change((function () { 0 == cms.convertToDecimal(this.value) && a.find(`#amount${r}`).val(""), c() })), a.find(".datepicker").datepicker({ todayHighlight: !0 }); const t = a.find(".form-select, .form-control"); t.prop("disabled", e), a.find(".delete").click((function () { $(this).closest("tr").remove(), 0 == queueTransactionItem.getSubTotal() && s.show(), $("#transactionItemsTable").find("tbody").children().length > 0 && (0 == queueTransactionItem.getSubTotal() || 0 == queueTransactionItem.getAmountToPay()) || i.children().length > 0 ? s.show() : s.hide(), c() })), a.find(".edit").click((function () { const e = $(this), n = "Edit" == e.text(); n ? e.html("Cancel") : (a.find(".payment-option").val(a.find(".payment-option").data("init-val")), a.find(".amount").val(a.find(".amount").data("init-val")).trigger("change"), a.find(".remarks").val(a.find(".remarks").data("init-val")), e.html("Edit")), t.prop("disabled", !n) })) } c() } function c() { let t = 0; i.find(".amount").each((function () { t += cms.convertToDecimal(this.value) })), a.text(`${_currencySymbol}${cms.numberWithCommas(t.toFixed(2))}`) } }(), queueItemSearchModal = function () { let t = $("#transactionModal"), e = t.find("#itemKeyword"), n = t.find("#searchItem"), i = $("#itemSearchModal"), a = $("#itemsTable"), o = null; return { init: function () { e.keydown((function (t) { 13 == t.which && s(this.value) })), n.click((function () { s(e.val()) })) }, viewForm: s }; function s(t) { !function (t) { null == o ? o = a.DataTable({ processing: !0, serverSide: !0, ajax: `${_url}/items`, columns: [{ data: null, name: "select", searchable: !1, orderable: !1 }, { data: "code", name: "code" }, { data: "name", name: "name" }, { data: "type", name: "type" }, { data: "category", name: "category" }, { data: "selling_price", name: "selling_price", render: function (t) { return _currencySymbol + cms.numberWithCommas(t) } }, { data: "cost_price", name: "cost_price", render: function (t) { return _currencySymbol + cms.numberWithCommas(t) } }, { data: "current_stock", name: "current_stock", searchable: !1, orderable: !1, render: function (t) { return cms.numberWithCommas(t) } }], order: [[1, "asc"]], createdRow: function (t, e, n) { let i = $(t); i.find("td:eq(0)").addClass("text-center").html(`\n                    <div class="btn-group">\n                        <button type="button" class="btn btn-primary btn-xs fs-9px dropdown-toggle" data-bs-toggle="dropdown">\n                            <span>Select</span>\n                            <span class="caret"></span>\n                        </button>\n                        <div class="dropdown-menu dropdown-menu-end ${e.is_package ? "package" : ""}" id="sel${e.id}" data-sc="${e.session_count}" data-uom="${e.uom}">\n                            <a href="javascript:;" class="dropdown-item select sp">Selling Price</a>\n                            <a href="javascript:;" class="dropdown-item select cp">Cost Price</a>\n                        </div>\n                    </div>`), e.is_package && i.find("td:eq(2)").html(`${e.name} <i class="fa fa-layer-group" data-bs-toggle="tooltip" data-bs-trigger="hover" data-bs-html="true" data-bs-title="${e.products}"></i>`), e.is_stock_unlimited && i.find("td:eq(7)").addClass("unlimited").html('<i class="fa fa-infinity"></i>') }, drawCallback: function () { cms.initTooltip(), a.find(".select").unbind("click").click((function () { const t = $(this), e = t.parent(), n = e.attr("id").replace("sel", ""), a = t.closest("tr"), o = a.find("td:eq(2)"), s = a.find("td:eq(7)"), r = e.hasClass("package"), d = t.hasClass("cp"), c = { id: 0, product_id: r ? "" : n, package_id: r ? n : "", item_code: a.find("td:eq(1)").text(), name: o.text(), is_cost_price: d ? 1 : 0, price: a.find(`td:eq(${d ? "6" : "5"})`).text().replace(_currencySymbol, ""), qty: 1, disc_percentage: 0, disc_amount: 0, session_count: "", product: { current_stock: 0, is_stock_unlimited: s.hasClass("unlimited") }, package_details: "", uom: e.data("uom") }; c.product.is_stock_unlimited || (c.product.current_stock = s.text()), r && (c.package_details = o.find(".fa-layer-group").data("bs-title").replace(/<br\s*\/?><br\s*\/?>/gi, ": ").replace(/<br\s*\/?>/gi, ", "), c.session_count = e.data("sc")), c.amount_to_pay = c.price, c.unit_price = c.price, queueTransactionItem.addItem(c), i.modal("hide") })) }, initComplete: function () { $("#itemsTable_filter input").unbind(), $("#itemsTable_filter input").keyup((function (t) { 13 == t.keyCode && o.search(this.value).draw() })); const e = $("#itemsTable_filter"), n = $(`\n                    <select id="typeFilter" class="additional-filter mb-sm-3 d-inline-block w-auto ms-2 form-select form-select-sm">\n                                        <option value="">All Types</option>\n                                        ${_productTypes.map((function (t) { return `<option value="${t.id}">${t.description}</option>` })).join("")}\n                                        </select>`).appendTo(e), i = $(`\n                    <select id="categoryFilter" class="additional-filter mb-sm-3 d-inline-block w-auto ms-2 form-select form-select-sm">\n                                        <option value="">All Categories</option>\n                                        ${_productCategories.map((function (t) { return `<option value="${t.id}">${t.description}</option>` })).join("")}\n                                        </select>`).appendTo(e); e.find(".additional-filter").change((function () { o.ajax.url(`${_url}/items?type=${n.val()}&category=${i.val()}`).load() })), o.search(t).draw() } }) : o.search(t).draw() }(t), i.modal("show") } }(), queueTransactionItem = function () { let t = $("#transactionModal"), e = $("#detailedView"), n = t.find("#transactionItemsTable"), i = n.find("tbody"), a = n.find("#totalLabel"), o = n.find("#totalPrice"), s = n.find("#overallDiscountLabel"), r = n.find("#overallDiscTypeDisplay"), d = n.find(".overall-disc-type"), c = n.find("#overallDiscTypePercentage"), l = n.find("#overallDiscTypeCurrency"), u = n.find("#overallDiscVal"), m = n.find("#overallDiscEditorContainer"), p = n.find("#overallDiscEditor"), f = n.find("#overallDiscDisplay"), b = n.find("#pxCreditLabel"), h = n.find("#pxCreditDisplay"), y = n.find("#pxCreditVal"), v = n.find("#pxAvailableCredit"), _ = n.find("#pxCreditEditorContainer"), x = n.find("#pxCreditEditor"), g = n.find("#totalTotalAmount"), k = n.find("#totalDiscount"), T = n.find("#preSubTotal"), C = n.find("#preAmountToPay"), w = n.find("#subTotalBeforePxCredit"), D = n.find("#amountToPayBeforePxCredit"), q = n.find("#totalSubTotal"), P = n.find("#totalAmountToPay"), S = !1, I = t.find("#addPayment"), A = $("#saveAsDraftTransaction"), M = $("#saveTransaction"), N = 0; return { init: function () { m.hide(), _.hide(), new AutoNumeric("#overallDiscEditor", { minimumValue: 0, watchExternalChanges: !0 }), new AutoNumeric("#pxCreditEditor", { minimumValue: 0, watchExternalChanges: !0 }), e.click((function () { const t = $(this), e = n.find(".optional"); t.toggleClass("btn-white").toggleClass("btn-primary"), S = t.hasClass("btn-primary"), S ? (a.attr("colspan", 5), s.attr("colspan", 7), b.attr("colspan", 7), e.show()) : (a.attr("colspan", 4), s.attr("colspan", 5), b.attr("colspan", 5), e.hide()) })), f.click((function () { $(this).hasClass("text-decoration-none") || (f.hide(), m.show(), p.focus()) })), h.click((function () { $(this).hasClass("text-decoration-none") || (h.hide(), _.show(), x.focus()) })), d.click((function () { d.removeClass("active"), $(this).addClass("active"), r.text(this.text), p.focus() })), p.keydown((function (t) { 13 == t.which && (m.hide(), f.text(this.value).show(), L(null)) })), x.keydown((function (t) { 13 == t.which && (_.hide(), h.text(this.value).show(), L(null)) })) }, addItem: function (t, e = !1) { const n = null != t.incomplete_transaction_id; _isDraft && A.show(); N++; const a = $(`<tr id="tr${t.id}" \n        data-prod-id="${cms.isNull(t.product_id)}" \n        data-pck-id="${cms.isNull(t.package_id)}" \n        data-sc="${cms.isNull(t.session_count)}" \n        data-cp="${cms.isNull(t.is_cost_price)}" \n        data-ic-id="${cms.isNull(t.incomplete_transaction_id)}">\n        ${_isDraft ? `\n            <td class="text-center">\n                <input class="form-check-input include-print mb-sm-2" type="checkbox" checked="true"/>\n                <button type="button" class="btn btn-primary btn-xs fs-9px delete"><i class="fa fa-trash"></i></button>\n            </td>\n            <td>${t.item_code}</td>\n            <td><span class="item-name">${t.name}</span>\n            ${t.session_count > 0 ? `<div class="use-session float-end form-check d-inline-block mb-0">\n                    <input class="form-check-input use-session" type="checkbox"${1 == t.is_session_used ? " checked" : ""}>\n                    <label class="form-check-label">Use session</label>\n                </div>` : ""}\n            ${"" != t.package_details ? `<br/><small>(${t.package_details})</small>` : ""}</td>\n            <td class="optional" ${S ? "" : 'style="display:none;"'}>${t.unit_price}</td>\n            <td>${n ? "-" : `\n                <a href="javascript:;" class="qty display">${t.qty}</a>\n                <div class="input-group input-group-sm" style="display:none;">\n                    <div class="input-group-text input-group-addon bg-primary stock">${"" != cms.isNull(t.package_id, "") || "" == cms.isNull(t.product_id, "") || t.product.is_stock_unlimited ? '<i class="fa fa-infinity"></i>' : t.product.current_stock}</div>\n                    <input id="qtyEditor${N}" type="text" class="editor qty-editor form-control form-control-sm" value="${t.qty}"/>\n                </div>\n                <small>${cms.isNull(t.uom, "")}</small>\n                `}\n            \n            </td>\n            <td>${_currencySymbol}${t.price} <input type="hidden" class="price-val" value="${t.price}" /></td>\n            <td class="optional" ${S ? "" : 'style="display:none;""'}>\n            ${_currencySymbol}<span class="total-amount-display"></span>\n            <input type="hidden" class="total-amount-val" value=""/>\n            </td>\n            <td>${n ? "-" : `<a href="javascript:;" class="disc display"></a>\n            <input type="hidden" class="disc-val" value=""/>\n            <div class="input-group input-group-sm" style="display:none;">\n                <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown">\n                    <span class="disc-type-display">${null != t.disc_percentage ? "%" : _currencySymbol}</span>\n                    <span class="caret"></span>\n                </button>\n                <div class="dropdown-menu dropdown-menu-end">\n                <a href="javascript:;" class="dropdown-item disc-type ${null != t.disc_percentage ? "active" : ""}">%</a>\n                <a href="javascript:;" class="dropdown-item disc-type" ${null != t.disc_percentage ? "" : "active"}>${_currencySymbol}</a>\n                </div>\n                <input id="discEditor${N}" type="text" class="editor currency-editor disc-editor form-control form-control-sm" value="${null != t.disc_percentage ? t.disc_percentage : t.disc_amount}"/>\n            </div>`}\n            \n            </td>\n            <td>\n            ${_currencySymbol}<span class="subtotal-display"></span>\n            <input type="hidden" class="subtotal-val" value=""/>\n            </td>\n            <td>\n                <a href="javascript:;" class="atp display">${_currencySymbol}${t.amount_to_pay}</a>\n                <div class="input-group input-group-sm" style="display:none;">\n                    <div class="input-group-text input-group-addon bg-primary">${_currencySymbol}</div>\n                    <input id="atpEditor${N}" type="text" class="editor currency-editor atp-editor form-control form-control-sm" value="${t.amount_to_pay}"/>\n                </div>\n            </td>\n            ` : `\n            <td>\n                <input class="form-check-input include-print" type="checkbox" checked="true"/>\n            </td>\n            <td>${t.item_code}</td>\n            <td>${t.name}${1 == t.is_session_used ? `<span class="float-end">${t.session_no}/${t.session_count}</span>` : ""}${"" != t.package_details ? `<br/><small class="no-print">(${t.package_details})</small>` : ""}</td>\n            <td class="optional" ${S ? "" : 'style="display:none;"'}>${cms.numberWithCommas(t.unit_price)}</td>\n            <td>\n            <span class="qty display">${cms.numberWithCommas(t.qty)} ${cms.isNull(t.uom, "")}</span>\n            </td>\n            <td>${_currencySymbol}${t.price} <input type="hidden" class="price-val" value="${t.price}" /></td>\n            <td class="optional" ${S ? "" : 'style="display:none;""'}>\n            ${_currencySymbol}<span class="total-amount-display">${cms.numberWithCommas(t.total_amount)}</span>\n            <input type="hidden" class="total-amount-val" value="${t.total_amount}"/>\n            </td>\n            <td>\n            <span class="disc display">${null != t.disc_percentage ? `(${t.disc_percentage}%)` : ""}${_currencySymbol}${cms.numberWithCommas(t.disc_amount)}</span>\n            <input type="hidden" class="disc-val" value="${t.disc_amount}"/>\n            </td>\n            <td>\n            ${_currencySymbol}<span class="subtotal-display">${cms.numberWithCommas(t.sub_total)}</span>\n            </td>\n            <td>\n                <span class="atp display">${_currencySymbol}${cms.numberWithCommas(t.amount_to_pay)}</span>\n            </td>\n            `}\n        </tr>`).appendTo(i); _isDraft && (n || (new AutoNumeric(`#qtyEditor${N}`, { minimumValue: 0, watchExternalChanges: !0 }), new AutoNumeric(`#discEditor${N}`, { minimumValue: 0, watchExternalChanges: !0 })), new AutoNumeric(`#atpEditor${N}`, { minimumValue: 0, watchExternalChanges: !0 }), a.find(".disc-type").click((function () { a.find(".disc-type").removeClass("active"); const t = $(this), e = t.closest(".input-group"); t.addClass("active"), e.find(".disc-type-display").text(this.text), e.find(".disc-editor").focus() })), a.find(".delete").click((function () { $(this).closest("tr").remove(), 0 == i.children().length && A.hide(), L(a) })), a.find(".display").click((function () { const t = $(this), e = t.parent(); if (t.hasClass("atp") && t.hasClass("text-decoration-none")) return !1; t.hide(), e.find(".input-group").show().find(".editor").focus() })), a.find(".editor").keydown((function (t) { if (13 == t.which) { const t = $(this), e = t.parent(); val = this.value, e.hide(), e.parent().find(".display").text(val).show(), L(a, t.hasClass("atp-editor")) } }))); _isDraft && L(a, e) }, getPreSubTotal: function () { return cms.convertToDecimal(T.text().replace(_currencySymbol, "")) }, getSubTotalBeforePxCredit: function () { return cms.convertToDecimal(w.text().replace(_currencySymbol, "")) }, getSubTotal: function () { return cms.convertToDecimal(q.text().replace(_currencySymbol, "")) }, getPreAmountToPay: function () { return cms.convertToDecimal(C.text().replace(_currencySymbol, "")) }, getAmountToPayBeforePxCredit: function () { return cms.convertToDecimal(D.text().replace(_currencySymbol, "")) }, getAmountToPay: function () { return cms.convertToDecimal(P.text().replace(_currencySymbol, "")) }, clearItems: function () { I.hide(), i.html(""), n.find("tfoot").find("th").not("#totalLabel,#overallDiscountLabel,#overallDiscountTH,#pxCreditLabel,#pxCreditTH").text(""), p.val(0), m.hide(), x.val(0), _.hide(), f.show() }, hasOpenEditor: function () { return i.find(".editor:visible").length > 0 || p.is(":visible") || x.is(":visible") }, itemJSON: function () { return i.children().map((function (t, e) { const n = $(e), i = "" != n.data("ic-id"), a = { id: this.id.replace("tr", ""), productId: n.data("prod-id"), packageId: n.data("pck-id"), icId: n.data("ic-id"), itemCode: n.find("td:eq(1)").text(), name: n.find(".item-name").text(), unitPrice: cms.convertToDecimal(n.find("td:eq(3)").text()), qty: 0, isCostPrice: n.data("cp"), price: cms.convertToDecimal(n.find(".price-val").val()), totalAmount: cms.convertToDecimal(n.find(".total-amount-val").val()), discPercentage: null, discAmount: 0, subTotal: cms.convertToDecimal(n.find(".subtotal-val").val()), atp: cms.convertToDecimal(n.find(".atp-editor").val()), sessionCount: n.data("sc"), icId: n.data("ic-id"), useSession: n.find(".use-session").is(":checked") ? 1 : 0, rowIndex: t + 1 }; return i || (a.qty = cms.convertToDecimal(n.find(".qty-editor").val()), a.discPercentage = "%" == n.find(".disc-type-display").text() ? cms.convertToDecimal(n.find(".disc-editor").val()) : null, a.discAmount = cms.convertToDecimal(n.find(".disc-val").val())), a })).get() }, isExists: function (t) { return i.find(`[data-ic-id="${t}"]`).length > 0 }, getOverallDiscPercentage: function () { return "%" == r.text() ? cms.convertToDecimal(p.val()) : null }, getOverallDiscAmount: function () { return cms.convertToDecimal(u.val()) }, getPxCredit: function () { return cms.convertToDecimal(y.val()) }, setOverallDiscount: function (t, e) { _isDraft ? (f.removeClass("text-decoration-none text-black"), null == t && null == e && (e = 0, t = 0), f.text(`${_currencySymbol}0.00`), u.val(e), d.removeClass("active"), _isDraft, null != t ? (p.val(t), r.text("%"), c.addClass("active")) : (p.val(e), r.text(_currencySymbol), l.addClass("active"))) : (f.addClass("text-decoration-none text-black"), f.text((null != t ? `(${t}%) ` : "") + _currencySymbol + cms.numberWithCommas(e))) }, setPxCredit: function (t) { null == t && (t = 0); h.text(`${_currencySymbol}0.00`), y.val(t), x.val(t), _isDraft ? (h.removeClass("text-decoration-none text-black"), L(null)) : h.addClass("text-decoration-none text-black") }, setAvailableCredit: function (t) { if (_isDraft) { const e = cms.numberWithCommas(t); v.val(e), b.text(`Patient Credit (${_currencySymbol}${e})`), h.text(`${_currencySymbol}0.00`) } else b.text("Patient Credit") }, setTotals: function ({ preTotalAmount: t, prePaidAmount: e, totalAmountBeforePxCredit: n, paidAmountBeforePxCredit: a, totalAmount: s, paidAmount: r, pxCredit: d }) { if (!_isDraft) { let c = 0; i.find(".price-val").each((function () { c += cms.convertToDecimal(this.value) })), o.text(`${_currencySymbol}${cms.numberWithCommas(c.toFixed(2))}`), c = 0, i.find(".total-amount-val").each((function () { c += cms.convertToDecimal(this.value) })), g.text(`${_currencySymbol}${cms.numberWithCommas(c.toFixed(2))}`), c = 0, i.find(".disc-val").each((function () { c += cms.convertToDecimal(this.value) })), k.text(`${_currencySymbol}${cms.numberWithCommas(c.toFixed(2))}`), T.text(`${_currencySymbol}${cms.numberWithCommas(t)}`), C.text(`${_currencySymbol}${cms.numberWithCommas(e)}`), w.text(`${_currencySymbol}${cms.numberWithCommas(n)}`), D.text(`${_currencySymbol}${cms.numberWithCommas(a)}`), q.text(`${_currencySymbol}${cms.numberWithCommas(s)}`), P.text(`${_currencySymbol}${cms.numberWithCommas(r)}`), h.text(`${_currencySymbol}${cms.numberWithCommas(d)}`) } }, printItems: function () { const t = i.children().filter((function () { return $(this).find(".include-print").is(":checked") })); return _isDraft ? { products: t.filter((function () { return "" != $(this).data("prod-id") })).map((function () { const t = $(this); return { id: t.data("prod-id"), qty: t.find(".qty-editor").val() } })).get(), packIds: t.filter((function () { return "" != $(this).data("pck-id") })).map((function () { return $(this).data("pck-id") })).get() } : { trIds: t.filter((function () { return "tr0" != this.id })).map((function () { return this.id.replace("tr", "") })).get() } } }; function L(t, e = !1) { let n = 0; if (null != t) { const a = "" != t.data("ic-id"); let s = 1, r = "%", d = 0, c = 0, l = 0, u = 0; a || (s = cms.convertToDecimal(t.find(".qty-editor").val()), s <= 0 && (s = 1, t.find(".display.qty").text(cms.numberWithCommas(s.toFixed(2))), t.find(".qty-editor").val(s))); const m = s * cms.convertToDecimal(t.find(".price-val").val()); a || (r = t.find(".disc-type.active").text(), d = cms.convertToDecimal(t.find(".disc-editor").val()), "%" == r && d > 100 && (d = 100, t.find(".disc-editor").val(d)), c = "%" == r ? m * (d / 100) : d, c > m && (c = m)), l = m - c; const p = t.find(".display.atp"); 0 == l ? p.addClass("text-decoration-none text-black").removeAttr("href") : (p.removeClass("text-decoration-none").removeClass("text-black").attr("href", "javascript:;"), e ? (u = cms.convertToDecimal(t.find(".atp-editor").val()), u > l && (u = l)) : u = l), t.find(".total-amount-val").val(m), t.find(".total-amount-display").text(cms.numberWithCommas(m.toFixed(2))), a ? t.find(".display.disc").text("-") : t.find(".display.disc").text(("%" == r ? `(${d}%) ` : "") + _currencySymbol + cms.numberWithCommas(c.toFixed(2))), t.find(".disc-val").val(c), t.find(".subtotal-val").val(l), t.find(".subtotal-display").text(cms.numberWithCommas(l.toFixed(2))), t.find(".display.atp").text(_currencySymbol + cms.numberWithCommas(u.toFixed(2))), t.find(".atp-editor").val(u), i.find(".price-val").each((function () { n += cms.convertToDecimal(this.value) })), o.text(`${_currencySymbol}${cms.numberWithCommas(n.toFixed(2))}`), n = 0, i.find(".total-amount-val").each((function () { n += cms.convertToDecimal(this.value) })), g.text(`${_currencySymbol}${cms.numberWithCommas(n.toFixed(2))}`), n = 0, i.find(".disc-val").each((function () { n += cms.convertToDecimal(this.value) })), k.text(`${_currencySymbol}${cms.numberWithCommas(n.toFixed(2))}`), n = 0, i.find(".subtotal-val").each((function () { n += cms.convertToDecimal(this.value) })), T.text(`${_currencySymbol}${cms.numberWithCommas(n.toFixed(2))}`), n = 0, i.find(".atp-editor").each((function () { n += cms.convertToDecimal(this.value) })), C.text(`${_currencySymbol}${cms.numberWithCommas(n.toFixed(2))}`) } n = cms.convertToDecimal(T.text().replace(_currencySymbol, "")); let a = "%", s = 0, d = 0; a = r.text(), s = cms.convertToDecimal(p.val()), "%" == a && s > 100 && (s = 100, p.val(s)), d = "%" == a ? n * (s / 100) : s, d > n && (d = n, "%" != a && p.val(d)), f.text(("%" == a ? `(${s}%) ` : "") + _currencySymbol + cms.numberWithCommas(d.toFixed(2))), u.val(d), n -= d, w.text(`${_currencySymbol}${cms.numberWithCommas(n.toFixed(2))}`); let c = cms.convertToDecimal(C.text().replace(_currencySymbol, "")); c > n && (c = n), D.text(`${_currencySymbol}${cms.numberWithCommas(c.toFixed(2))}`); let l = cms.convertToDecimal(x.val()); const m = _isDraft ? cms.convertToDecimal(v.val()) : l; l > n && (l = n), l > m && (l = m), x.val(l), h.text(`${_currencySymbol}${cms.numberWithCommas(l.toFixed(2))}`), y.val(l), n -= l, q.text(`${_currencySymbol}${cms.numberWithCommas(n.toFixed(2))}`), c > n && (c = n), P.text(`${_currencySymbol}${cms.numberWithCommas(c.toFixed(2))}`), i.children().length > 0 && (0 == n || 0 == c) || $("#paymentsTable").find("tbody").children().length > 0 ? M.show() : M.hide(), i.children().length > 0 ? I.show() : I.hide() } }(), queueTransactionModal = function () { let t = $("#transactionModal"), e = t.find("#allergyContainer"), n = t.find("#transactionModalTitle"), i = t.find("#patientId"), a = t.find("#sessionBalanceCount"), o = t.find("#overallDiscTypeCurrency"), s = $("#saveAsDraftTransaction"), r = $("#printInvoice"), d = $("#printPatientLabel"), c = $("#printItemLabel"), l = t.find("#notes"), u = t.find("#refNo"), m = t.find("#doctor"), p = t.find("#transactionRemarks"), f = t.find("#includeInvoiceRemarks"), b = $("#saveTransaction"); return { init: function () { t.on("hidden.bs.modal", (function () { s.hide(), b.hide(), queueTransactionItem.clearItems(), queueTransactionPayment.clearItems() })), r.click((function () { queueInvoice.printInvoice() })), d.click((function () { pxLabel.printLabel(`${_rootUrl}/patients/${i.val()}/label`) })), c.click((function () { queueItemLabel.view() })), s.click((function () { h(1) })), b.click((function () { cms.confirm("Post Transaction", "Are you sure you want to post this transaction?", (() => { h(0) })) })) }, viewForm: function (s, r, d, c) { i.val(c), n.text(`${r}: ${s.format("MMMM DD, YYYY")} - ${d}`), cms.get(`${_url}/${_id}/edit`, null, (function (n) { !function (n) { _isDraft = n.isDraft, _currencySymbol = n.currencySymbol, o.text(_currencySymbol); const i = cms.isNull(n.foodAllergies, ""), s = cms.isNull(n.drugAllergies, ""); "" != cms.isNull(n.foodAllergies, "") || "" != cms.isNull(n.drugAllergies, "") ? e.html(`\n            ${"" != s ? `Drug Allergies: ${s}<br/>` : ""}\n            ${"" != i ? `Food Allergies: ${i}` : ""}\n            `).show() : e.html("").hide(); a.text(n.sessionBalanceCount), 0 == n.sessionBalanceCount ? a.hide() : a.show(); _isDraft ? (t.find("#addUnknownItem").prop("disabled", !1).show(), t.find(".posted-hide").prop("disabled", !1).show()) : (t.find("#addUnknownItem").prop("disabled", !0).hide(), t.find(".posted-hide").prop("disabled", !0).hide()); t.find(".posted-disable").prop("disabled", !_isDraft), queueTransactionItem.setOverallDiscount(n.overallDiscPercentage, n.overallDiscAmount), queueTransactionItem.setAvailableCredit(n.availableCredit), l.val(n.notes), u.val(n.refNo), m.val(n.doctor), p.val(n.transactionRemarks), f.length > 0 && f.prop("checked", n.includeInvoiceRemarks).trigger("change"); for (let t = 0; t < n.transactions.length; t++) { const e = n.transactions[t]; e.price = cms.numberWithCommas(e.price), null != e.product && (e.product.current_stock = cms.numberWithCommas(e.product.current_stock)), queueTransactionItem.addItem(e, !0) } queueTransactionItem.setPxCredit(n.pxCredit), queueTransactionItem.setTotals({ preTotalAmount: n.preTotalAmount, prePaidAmount: n.prePaidAmount, totalAmountBeforePxCredit: n.totalAmountBeforePxCredit, paidAmountBeforePxCredit: n.paidAmountBeforePxCredit, totalAmount: n.totalAmount, paidAmount: n.paidAmount, pxCredit: n.pxCredit }); for (let t = 0; t < n.payments.length; t++) { const e = n.payments[t]; queueTransactionPayment.addPayment(e, !0) } n.transactions.length > 0 && (0 == queueTransactionItem.getSubTotal() || 0 == queueTransactionItem.getAmountToPay()) && b.show() }(n), t.modal("show") })) } }; function h(e) { let n; if (_isDraft) { if (queueTransactionItem.hasOpenEditor()) return toastr.error("Please close all editor to finalize the computation."), !1; let t = queueTransactionItem.itemJSON(); if (0 == t.length) return toastr.error("Unable to save transaction, no item found."), !1; const i = t.filter((function (t) { return t.sessionCount > 0 && 0 == t.atp && 0 == t.useSession && (0 == t.totalAmount || t.totalAmount > 0 && "" != t.icId) })).map((function (t) { return `${t.itemCode} (Row ${t.rowIndex})` })).join(", "); if (!e && "" != i) return toastr.error(`No action found for ${i}. Please remove them.`), !1; if (!queueTransactionPayment.isValid()) return toastr.error("Please complete payment"), !1; let a = queueTransactionPayment.itemJSON(); queueTransactionItem.getSubTotal(); if (a.length > 0 && !e && queueTransactionItem.getAmountToPay() != queueTransactionPayment.getPaymentTotal()) return toastr.error("Unable to save transaction, payment total is not equal to amount to pay."), !1; n = { isDraft: e, transactions: t, payments: a, preTotalAmount: queueTransactionItem.getPreSubTotal(), totalAmountBeforePxCredit: queueTransactionItem.getSubTotalBeforePxCredit(), totalAmount: queueTransactionItem.getSubTotal(), prePaidAmount: queueTransactionItem.getPreAmountToPay(), paidAmount: queueTransactionItem.getAmountToPay(), paidAmountBeforePxCredit: queueTransactionItem.getAmountToPayBeforePxCredit(), overallDiscPercentage: queueTransactionItem.getOverallDiscPercentage(), overallDiscAmount: queueTransactionItem.getOverallDiscAmount(), pxCredit: queueTransactionItem.getPxCredit(), notes: l.val(), refNo: u.val(), doctor: m.val(), transactionRemarks: p.val(), includeInvoiceRemarks: f.length > 0 && f.is(":checked") ? 1 : 0 } } else n = { isDraft: e, notes: l.val(), refNo: u.val(), doctor: m.val(), transactionRemarks: p.val(), includeInvoiceRemarks: f.length > 0 && f.is(":checked") ? 1 : 0 }; cms.saveForm(_id, n, _url, (function () { queueList.reload(), t.modal("hide") })) } }(), queueAppointment = function () { let t, e = $("#calendar"); return { init: function () { e = document.getElementById("calendar"), t = new FullCalendar.Calendar(e, { schedulerLicenseKey: "CC-Attribution-NonCommercial-NoDerivatives", initialView: "timeGridDay", headerToolbar: { left: "", center: "", right: "" }, eventSources: [{ display: "block", url: `${_rootUrl}/appointment/calendar?status=all&category=all` }] }), t.render() }, reload: function () { t.refetchEvents() }, getPatientAppointment: function (e) { const n = t.getEvents().filter((function (t) { return t.extendedProps.patient_id == e })); if (n.length > 0) return n[0].start; return null } } }(), queueNotesModal = function () { let t = $("#notesModal"), e = t.find("#notesModalTitle"), n = t.find("#notes"), i = $("#saveNotes"); return { init: function () { i.click((function () { cms.put(`${_url}/${_id}/update-notes`, { notes: n.val() }, (() => { toastr.success("Notes has been updated.", "Update Notes"), queueList.reload(), t.modal("hide") })) })) }, viewForm: function (i, a, o) { n.val(i), e.text(`Notes: ${a} - ${o}`), t.modal("show") } } }(), queueTimePicker = function () { let t, e, n = $("#timePickerModal"), i = n.find("#timePickerModalTitle"), a = n.find("#time"), o = n.find("#timeValue"), s = $("#saveTime"); return { init: function () { s.click((function () { cms.put(`${_url}/${_id}/update-${e.toLowerCase().replace(" ", "-")}`, { time: cms.convertToDateTime(o.val()) }, (() => { toastr.success(`${e} has been updated.`, `Update ${e}`), queueList.reload(), n.modal("hide") })) })) }, viewForm: function (o, s, r, d) { (function (e) { null != t && t.data("DateTimePicker").destroy(); t = a.datetimepicker({ defaultDate: e, format: "DD/MM/YYYY hh:mm A", keepOpen: !0, sideBySide: !0, inline: !0 }) })(o), e = s, i.text(`${e}: ${r} - ${d}`), n.modal("show") } } }(), queueForm = function () { let t, e, n = $("#queueFormModal"), i = n.find("#queueForm"), a = i.find("#patient"), o = i.find("#timeIn"), s = i.find("#notes"), r = $("#saveQueue"); return { init: function () { a.select2({ placeholder: "Select Patient", dropdownParent: i }), t = o.datetimepicker({ format: "DD/MM/YYYY hh:mm A", keepOpen: !0, sideBySide: !0 }), a.change((function () { e = queueAppointment.getPatientAppointment(this.value) })), r.click((function () { !function () { if (i.parsley().validate()) { let t = { patient: a.val(), timeIn: cms.convertToDateTime(o.val()), appointment: cms.convertToDateTime(e), notes: s.val() }; cms.saveForm(0, t, _url, (function () { queueList.reload(), d() })) } }() })), n.on("hidden.bs.modal", (function () { d() })) }, viewForm: function () { queueAppointment.reload(), o.val(cms.currentDateTime()), n.modal("show") } }; function d() { i[0].reset(), i.parsley().reset(), i.find("select").trigger("change") } }(), queueList = function () { let t, e, n = $("#addQueue"), i = $("#queuesTable"), a = $("#currentDate"), o = $("#currentTime"), s = []; return { init: function () { t = moment(), "" != _defaultDate && (t = moment(_defaultDate), _defaultDate = ""); _isCurrentBranchAll && n.remove(); setInterval((function () { a.text(moment().format("MMMM DD, YYYY")), o.text(moment().format("hh:mm A")) }), 1e3), e = i.DataTable({ processing: !0, serverSide: !0, pageLength: 50, ajax: `${_url}?date=${t.format("YYYY-MM-DD")}`, columns: [{ data: null, name: "actions", searchable: !1, orderable: !1 }, { data: null, name: "image", searchable: !1, orderable: !1 }, { data: "code", name: "code" }, { data: "patient", name: "patient" }, { data: "appointment_schedule", name: "appointment_schedule" }, { data: "time_in", name: "time_in" }, { data: "time_out", name: "time_out" }, { data: "notes", name: "notes" }, { data: "total_amount", name: "total_amount" }, { data: "paid_amount", name: "paid_amount" }, { data: "status", name: "status" }], order: [[2, "asc"]], createdRow: function (t, e, n) { let i = $(t); e.is_voided && i.addClass("text-decoration-line-through fst-italic"), i.find("td:eq(0)").addClass("text-center").html(`<div class="btn-group dropend">\n                        <a href="#" class="dropdown-toggle text-primary" data-bs-toggle="dropdown">\n                        <i class="fa fa-ellipsis-vertical"></i>\n                        </a>\n                        <ul class="dropdown-menu dropdown-menu-end">\n                            ${e.is_draft ? `<li><button id="del${e.id}" class="dropdown-item delete fs-11px" type="button">Delete</button></li>` : ""}\n                            ${e.is_draft || e.is_voided || !_isAdmin ? "" : `<li><button id="void${e.id}" class="dropdown-item void fs-11px" type="button">Void</button></li>`}\n                            <li><button id="opres${e.id}" class="dropdown-item opres fs-11px" type="button">Outside Presciption</button></li>\n                        </ul>\n                    </div>`), i.find("td:eq(1)").addClass("text-center").html(`<img src="/${null != e.photo_ext ? `storage/profile/${e.patient_id}.${e.photo_ext}?v=${moment(e.patient_updated_at).format("MMDDYYYYHHmmss")}` : _defaultPhotoSrc}" class="rounded h-30px my-n1 mx-n1">`), i.find("td:eq(4)").html(e.appointment_schedule ? `<i class="fa fa-calendar" data-bs-toggle="tooltip" data-bs-trigger="hover" data-bs-title="${cms.formatDate(e.appointment_schedule)}"></i> ${cms.formatTime(e.appointment_schedule)}` : ""), i.find("td:eq(5)").html(`<i class="fa fa-calendar" data-bs-toggle="tooltip" data-bs-trigger="hover" data-bs-title="${cms.formatDate(e.time_in)}"></i> <a href="javascript:;" id="timeInLink${e.id}" class='time-in-link' data-d="${cms.formatDateTime(e.time_in)}">${cms.formatTime(e.time_in)}</a>`), i.find("td:eq(6)").html(e.time_out ? `<i class="fa fa-calendar" data-bs-toggle="tooltip" data-bs-trigger="hover" data-bs-title="${cms.formatDate(e.time_out)}"></i> <a href="javascript:;" id="timeOutLink${e.id}" class='time-out-link' data-d="${cms.formatDateTime(e.time_out)}">${cms.formatTime(e.time_out)}</a>` : `<a href="javascript:;" id="timeOutLink${e.id}" class='time-out-link' data-d="">--:-- --</a>`), i.find("td:eq(7)").html(`<a href="javascript:;" id="notesLink${e.id}" class='notes-link' data-d="${e.notes ? e.notes : ""}">${e.notes ? e.notes : '<i class="fa fa-pen-to-square"></i>'}</a>`), i.find("td:eq(8)").html(`\n                <a href="javascript:;" id="amountLink${e.id}" class='amount-link ${e.is_draft ? "" : "text-" + (null != e.balance ? "warning" : "success")}' \n                    data-p-id="${e.patient_id}">${e.currency_symbol}${e.total_amount ? cms.numberWithCommas(e.total_amount) : "0.00"}</a>\n                    ${null != e.balance ? ` <i class="fa-solid fa-circle-exclamation" data-bs-toggle="popover" data-bs-trigger="hover" data-bs-html="true" data-bs-title="Remaining Balance" data-bs-content="<div class='text-nowrap'>${e.balance}</div>"></i>` : ""}`), i.find("td:eq(9)").html(`${e.currency_symbol}${null == e.paid_amount ? "0.00" : cms.numberWithCommas(e.paid_amount)}`); const a = i.find("td:eq(10)"); function o(t) { const n = []; let i, a; for (let o = 0; o < t.length; o++) { const s = t[o]; a = "", e.queue_status_id == s.id && (a = " active", i = s.hex_color), n.push(`<li>\n                        <a id='status${s.id}_${e.id}' class="dropdown-item status${a}" href="javascript:;">\n                            <i class="fa fa-square" style="color:#${s.hex_color}"></i> ${s.description}\n                        </a>\n                    </li>`) } return `<div class="btn-group w-100">\n                    <button class="btn btn-sm dropdown-toggle text-white" type="button" data-bs-toggle="dropdown" style="background-color:#${i};"\n                        aria-expanded="false">\n                        ${e.status}\n                        <b class="caret ms-lg-2"></b>\n                    </button>\n                    <ul class="dropdown-menu">\n                    ${n.join("")}\n                    </ul>\n                </div>` } null == s[e.branch_id] && (s[e.branch_id] = _statuses.filter((function (t) { return t.branch_id == e.branch_id }))), a.html(o(s[e.branch_id])) }, drawCallback: function () { cms.initTooltip(), cms.initPopover(), i.find(".delete").unbind("click").click((function () { cms.confirm("Delete Queue", "Are you sure you want to delete this record?", (() => { cms.delete(`${_url}/${this.id.replace("del", "")}`, null, (() => { toastr.success("Queue has been deleted.", "Delete Queue"), queueList.reload() })) })) })), i.find(".void").unbind("click").click((function () { cms.confirm("Void Queue", "Are you sure you want to void this record?", (() => { cms.put(`${_url}/${this.id.replace("void", "")}/void`, null, (() => { toastr.success("Queue has been voided.", "Void Queue"), queueList.reload() })) })) })), i.find(".opres").unbind("click").click((function () { _id = this.id.replace("opres", ""); const t = $(this).closest("tr"); queueOutsidePrescription.view(t.find("td:eq(2)").text(), t.find("td:eq(3)").text()) })), i.find(".time-in-link").unbind("click").click((function () { _id = this.id.replace("timeInLink", ""); const t = $(this), e = t.closest("tr"); queueTimePicker.viewForm(cms.convertToDateTime(t.data("d")), "Time In", e.find("td:eq(2)").text(), e.find("td:eq(3)").text()) })), i.find(".time-out-link").unbind("click").click((function () { _id = this.id.replace("timeOutLink", ""); const t = $(this), e = t.data("d"), n = t.closest("tr"); queueTimePicker.viewForm("" != e ? e : cms.currentDateTime(!1), "Time Out", n.find("td:eq(2)").text(), n.find("td:eq(3)").text()) })), i.find(".notes-link").unbind("click").click((function () { _id = this.id.replace("notesLink", ""); const t = $(this), e = t.data("d"), n = t.closest("tr"); queueNotesModal.viewForm(e, n.find("td:eq(2)").text(), n.find("td:eq(3)").text()) })), i.find(".amount-link").unbind("click").click((function () { _id = this.id.replace("amountLink", ""); const e = $(this), n = e.closest("tr"); queueTransactionModal.viewForm(t, n.find("td:eq(2)").text(), n.find("td:eq(3)").text(), e.data("p-id")) })), i.find(".status").unbind("click").click((function () { const t = this.id.replace("status", "").split("_"); _id = t[1], cms.put(`${_url}/${_id}/update-status/${t[0]}`, null, (() => { toastr.success("Status has been updated.", "Update Status"), r() })) })), "" != _defaultId && (i.find(`#amountLink${_defaultId}`).trigger("click"), _defaultId = "", window.history.pushState({}, document.title, window.location.pathname)) }, dom: "<'row'<'col-sm-12 col-lg-4 mb-3'<'#queuesTable_navigator'>><'col-sm-12 col-lg-4 mb-3'f><'col-sm-12 col-lg-2 mb-3'<'#statusFilter_wrapper'>><'col-sm-12 col-lg-2 mb-3'l>>\n            <'row'<'col-sm-12'tr>>\n            <'row'<'col-sm-12 col-lg-5 mb-3'i><'col-sm-12 col-lg-7 mb-3'p>>", initComplete: function () { $("#queuesTable_filter input").unbind(), $("#queuesTable_filter input").keyup((function (t) { 13 == t.keyCode && e.search(this.value).draw() })), $("#queuesTable_navigator").append(`<div class="input-group input-group-sm">\n                <button id="prevDay" type="button" class="btn btn-primary">Prev Day</button>\n                \n                <input type="text" id="navigatorDate" class="form-control form-control-sm" value="${t.format("MMMM DD, YYYY")}" onkeydown="return false;">\n                \n                \n                <button id="nextDay" type="button" class="btn btn-primary" disabled="true">Next Day</button>\n                </div>`).addClass("d-inline-block w-80").after('<button id="todayButton" type="button" class="btn btn-primary d-inline-block ms-1" disabled="true">Today</button>'); const n = $('<select id="statusFilter" class="form-select form-select-sm">\n                                        <option value="">All Status</option>\n                                        <option>Draft</option>\n                                        <option>Posted</option>\n                                        <option>Voided</option>\n                                        </select>'); $("#statusFilter_wrapper").append(n); const i = $("#queuesTable_filter"); i.find("label").addClass("w-100"), i.find("input").addClass("w-100"); const o = $("#navigatorDate"), s = $("#prevDay"), r = $("#nextDay"), d = $("#todayButton"); function c() { t = moment(o.val()), l(), e.ajax.url(`${_url}?status=${n.val()}&date=${t.format("YYYY-MM-DD")}`).load() } function l() { const e = t.format("L"), n = moment().format("L"); moment(t) > moment(n) && (t = moment()), r.prop("disabled", moment(t) >= moment(n)), d.prop("disabled", e == n) } o.datepicker({ format: "MM dd, yyyy", endDate: cms.currentDate(!1), todayHighlight: !0 }).change((function () { c() })), s.click((function () { o.datepicker("setDate", moment(o.val()).add(-1, "days").format("MMMM DD, YYYY")) })), d.click((function () { o.datepicker("setDate", a.text()) })), r.click((function () { o.datepicker("setDate", moment(o.val()).add(1, "days").format("MMMM DD, YYYY")) })), n.change((function () { e.ajax.url(`${_url}?status=${this.value}&date=${t.format("YYYY-MM-DD")}`).load() })), l() } }), n.click((function () { queueForm.viewForm() })) }, reload: r }; function r() { e.ajax.reload(null, !1) } }(); $((function () { $(document).ready((function () { queueList.init(), queueForm.init(), queueTimePicker.init(), queueNotesModal.init(), queueAppointment.init(), queueTransactionModal.init(), queueItemSearchModal.init(), queueTransactionItem.init(), queueTransactionPayment.init(), queueSessionBalance.init(), queueOutsidePrescription.init(), queueItemLabel.init(), queueUnknownItem.init() })) }));
